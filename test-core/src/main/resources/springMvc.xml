<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd">

    <!-- 自动扫描controller包下的handler -->
    <context:component-scan base-package="com.framework.*"/>

    <!--注解映射器 -->
    <!-- <bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping"/> -->
    <!--注解适配器 -->
    <!-- <bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter"/> -->

    <!-- 使用 mvc:annotation-driven代替上边注解映射器和注解适配器配置
    mvc:annotation-driven默认加载很多的参数绑定方法，
    比如json转换解析器就默认加载了，如果使用mvc:annotation-driven不用配置上边的RequestMappingHandlerMapping和RequestMappingHandlerAdapter
    实际开发时使用mvc:annotation-driven -->

    <mvc:annotation-driven conversion-service="conversionService"></mvc:annotation-driven>

    <!-- 自定义参数绑定 -->
    <bean id="conversionService" class="org.springframework.format.support.FormattingConversionServiceFactoryBean">
        <!--转换器-->
        <property name="converters">
            <list>
                <bean class="com.framework.Util.DateConverter"/>
            </list>
        </property>
    </bean>

    <!-- 拦截器 -->
    <!--<mvc:interceptors>
        &lt;!&ndash; 直接定义拦截所有请求 &ndash;&gt;
        <bean class="com.*.IdentityInterceptor"></bean>
        &lt;!&ndash; <mvc:interceptor>
            拦截所有路径的请求   包括子路径
            <mvc:mapping path="/**"/>
            <bean class="com.wxisme.ssm.interceptor.IdentityInterceptor"></bean>
        </mvc:interceptor> &ndash;&gt;
    </mvc:interceptors>-->

    <!-- 定义全局异常处理器 -->
    <!-- 只有一个全局异常处理器起作用 -->
    <!--<bean id="exceptionResolver" class="com.*.OverallExceptionResolver"></bean>-->

    <!--配置上传文件数据解析器  -->
    <!--<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <property name="maxUploadSize">
            <value>9242880</value>
        </property>
    </bean>-->

    <!-- 如果DispatcherServlet拦截的url-pattern是/，就会拦截静态资源，配置可以访问静态: -->
    <mvc:resources mapping="/images/**" location="/images/" />
    <mvc:resources mapping="/css/**" location="/css/" />
    <mvc:resources mapping="/js/**" location="/js/" />



    <!-- 视图解析器
	解析jsp解析，默认使用jstl标签，classpath下的得有jstl的包
	 -->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <!-- 配置jsp路径的前缀 -->
        <property name="prefix" value="/page/"/>
        <!-- 配置jsp路径的前缀 -->
        <property name="suffix" value=".jsp"/>
        <!--<property name="order" value="2" />-->
    </bean>

</beans>